"""
Transaction data, including hash and timestamp
"""
type Transaction @entity(immutable: true) {
  """
  ID is transaction hash
  """
  id: ID!
  blockNumber: Int!
  """
  The timestamp the transaction was confirmed
  """
  timestamp: Int!
  gasPrice: BigInt!
  """
  The index of this transaction within the block
  """
  index: Int!
  """
  The account that initiated this transaction. This must be an Account and not a Contract.
  """
  from: User!
  """
  The contract the user interacted with
  """
  to: Bytes
  value: BigInt!
  gasLimit: BigInt!
  functionSignature: String!
}

type User @entity(immutable: false) {
  id: ID!
  createdAt: Int!

  stakes: [Stake!]! @derivedFrom(field: "user")
  deposits: [Deposit!]! @derivedFrom(field: "user")
  withdraws: [Withdraw!]! @derivedFrom(field: "user")
  transactions: [Transaction!]! @derivedFrom(field: "from")
}

type Staking @entity(immutable: false) {
  id: ID!
  weightScaling: BigInt!
  transaction: Transaction!
}

type Stake @entity(immutable: false) {
  id: ID!
  user: User!
  amount: BigInt! # uint256
  lockedUntil: BigInt! # uint256

  deposits: [Deposit!]! @derivedFrom(field: "stake")
  withdraws: [Withdraw!]! @derivedFrom(field: "stake")
  extends: [Extend!]! @derivedFrom(field: "stake")

  migrated: [Extend!]! @derivedFrom(field: "prevStake")
}

type Deposit @entity(immutable: true) {
  id: ID!
  stake: Stake!
  user: User!
  amount: BigInt! # uint256
  transaction: Transaction!
  timestamp: Int!
}

type Withdraw @entity(immutable: true) {
  id: ID!
  stake: Stake!
  user: User!
  amount: BigInt! # uint256
  transaction: Transaction!
  timestamp: Int!

  slash: MaybeSlash
}

type Extend @entity(immutable: true) {
  id: ID!
  user: User!
  stake: Stake!
  prevStake: Stake!
  transaction: Transaction!
  timestamp: Int!
}

type MaybeSlash @entity(immutable: true) {
  id: ID! # ID is tx hash - it can't be tx hash + log index because we need to load on tx hash
  sender: Bytes!
  token: Bytes!
  amount: BigInt!
}
